@ngdoc overview
@name Tutorial: 320 Complex Grouping
@description This tutorial covers grouping with values other than count shown in the group header,
and with edit enabled.

We create a custom columnsProcessor to override the default aggregation that grouping sets, including
setting a custom aggregation function so that we can aggregate data from a different column than the
one we're on.

We turn on the ability to select group headers, and write a callback on the selection event to select all
children of the selected rowHeader.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid', 'ui.grid.grouping', 'ui.grid.edit', 'ui.grid.selection' ]);

    app.controller('MainCtrl', ['$scope', '$http', '$interval', 'uiGridGroupingConstants', '$filter', function ($scope, $http, $interval, uiGridGroupingConstants, $filter ) {
      var setGroupValues = function( columns, rows ) {
        columns.forEach( function( column ) {
          if ( column.grouping && column.grouping.groupPriority > -1 ){
            column.treeAggregation.type = uiGridGroupingConstants.aggregation.CUSTOM;
            column.customTreeAggregationFn = function( aggregation, fieldValue, numValue, row ) {
              if ( typeof(aggregation.value) === 'undefined') {
                aggregation.value = 0;
              }
              aggregation.value = aggregation.value + row.entity.balance;
            };
            column.customTreeAggregationFinalizerFn = function( aggregation ) {
              if ( typeof(aggregation.groupVal) !== 'undefined') {
                aggregation.rendered = aggregation.groupVal + ' (' + $filter('currency')(aggregation.value) + ')';
              } else {
                aggregation.rendered = null;
              }
            };
          } else {
            delete column.customTreeAggregationFn;
          }
        });
        return columns;
      };

      $scope.gridOptions = {
        enableFiltering: true,
        enableGroupHeaderSelection: true,
        treeRowHeaderAlwaysVisible: false,
        columnDefs: [
          { name: 'name', width: '30%' },
          { name: 'gender', grouping: { groupPriority: 1 }, sort: { priority: 1, direction: 'asc' }, editableCellTemplate: 'ui-grid/dropdownEditor', width: '20%',
            cellFilter: 'mapGender', editDropdownValueLabel: 'gender', editDropdownOptionsArray: [
              { id: 1, gender: 'male' },
              { id: 2, gender: 'female' }
            ] 
          },
          { name: 'age', treeAggregation: { type: uiGridGroupingConstants.aggregation.MAX }, width: '20%' },
          { name: 'company', width: '25%' },
          { name: 'state', grouping: { groupPriority: 0 }, sort: { priority: 0, direction: 'desc' }, width: '35%', cellTemplate: '<div><div ng-if="!col.grouping || col.grouping.groupPriority === undefined || col.grouping.groupPriority === null || ( row.groupHeader && col.grouping.groupPriority === row.treeLevel )" class="ui-grid-cell-contents" title="TOOLTIP">{{COL_FIELD CUSTOM_FILTERS}}</div></div>' },
          { name: 'balance', width: '25%', cellFilter: 'currency', treeAggregation: { type: uiGridGroupingConstants.aggregation.AVG }, customTreeAggregationFinalizerFn: function( aggregation ) { 
            aggregation.rendered = aggregation.value; 
          } }
        ],
        onRegisterApi: function( gridApi ) {
          $scope.gridApi = gridApi;
          $scope.gridApi.grid.registerColumnsProcessor( setGroupValues, 410 );
          $scope.gridApi.selection.on.rowSelectionChanged( $scope, function ( rowChanged ) {
            if ( typeof(rowChanged.treeLevel) !== 'undefined' && rowChanged.treeLevel > -1 ) {
              // this is a group header
              children = $scope.gridApi.treeBase.getRowChildren( rowChanged );
              children.forEach( function ( child ) {
                if ( rowChanged.isSelected ) {
                  $scope.gridApi.selection.selectRow( child.entity );
                } else {
                  $scope.gridApi.selection.unSelectRow( child.entity );
                }
              });
            }
          });
        }
      };

      $http.get('/data/500_complex.json')
      .success(function(data) {
        for ( var i = 0; i < data.length; i++ ){
          data[i].state = data[i].address.state;
          data[i].gender = data[i].gender === 'male' ? 1: 2;
          data[i].balance = Number( data[i].balance.slice(1).replace(/,/,'') );
        }
        delete data[2].age;
        $scope.gridOptions.data = data;
      });

    }])
    .filter('mapGender', function() {
      var genderHash = {
        1: 'male',
        2: 'female'
      };

      return function(input) {
        var result;
        var match;
        if (!input){
          return '';
        } else if (result = genderHash[input]) {
          return result;
        } else if ( ( match = input.match(/(.+)( \([$\d,.]+\))/) ) && ( result = genderHash[match[1]] ) ) {
          return result + match[2];
        } else {
          return input;
        }
      };
    });
  </file>
  
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div id="grid1" ui-grid="gridOptions" ui-grid-grouping ui-grid-edit ui-grid-selection class="grid"></div>
    </div>
  </file>
  
  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    describe( '209 grouping', function() {
    });
  </file>  
</example>
